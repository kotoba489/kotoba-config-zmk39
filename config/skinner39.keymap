#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

/ {
    combos {
        compatible = "zmk,combos";

        esc {
            bindings = <&kp ESCAPE>;
            key-positions = <1 2>;
            timeout-ms = <32>;
        };

        pl {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <5 6>;
            timeout-ms = <32>;
        };

        pr {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <6 7>;
            timeout-ms = <32>;
        };

        kl {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <7 8>;
            timeout-ms = <32>;
        };

        kr {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <8 9>;
            timeout-ms = <32>;
        };

        hate {
            bindings = <&kp QUESTION>;
            key-positions = <9 19>;
            timeout-ms = <32>;
        };

        ss4 {
            bindings = <&kp LG(LS(NUMBER_4))>;
            key-positions = <20 21>;
            timeout-ms = <32>;
        };

        call {
            bindings = <&kp CAPS>;
            key-positions = <20 10>;
            timeout-ms = <32>;
        };

        up {
            bindings = <&kp UP_ARROW>;
            key-positions = <13 14>;
            timeout-ms = <32>;
        };

        dw {
            bindings = <&kp DOWN>;
            key-positions = <23 24>;
            timeout-ms = <32>;
        };

        le {
            bindings = <&kp LEFT_ARROW>;
            key-positions = <13 23>;
            timeout-ms = <32>;
        };

        ri {
            bindings = <&kp RIGHT_ARROW>;
            key-positions = <14 24>;
            timeout-ms = <32>;
        };

        clcL {
            bindings = <&mkp LCLK>;
            key-positions = <16 17>;
            timeout-ms = <32>;
        };

        clcR {
            bindings = <&mkp RCLK>;
            key-positions = <17 18>;
            timeout-ms = <32>;
        };

        BTC {
            bindings = <&bt BT_CLR>;
            key-positions = <3 4>;
            timeout-ms = <32>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        ONISHI {
            bindings = <
  &mkp LCLK  &mt LCTRL D  &kp E         &kp U     &kp COMMA                                  &kp H    &kp S  &kp Y  &kp R  &kp B
  &kp Z      &kp MINUS    &kp I         &kp A     &kp O                                      &kp K    &kp N  &kp T  &kp W  &kp P
  &lt 5 Q    &kp X        &kp C         &kp V     &kp PERIOD                                 &kp G    &kp M  &kp F  &kp J  &kp L
  &kp LSHFT  &lt 1 S      &kp LEFT_ALT  &kp LCMD  &mt LCTRL SPACE  &kp BACKSPACE  &kp SPACE  &kp RET                       &bt BT_CLR
            >;

            label = "KTB";
        };

        NUM {
            bindings = <
  &mkp LCLK  &kp LCTRL  &kp N7        &kp N8        &kp N9                                &kp N0          &kp COMMA     &kp PERIOD  &bt BT_SEL 4  &bt BT_SEL 0
  &none      &to 2      &kp NUMBER_4  &kp N5        &kp NUMBER_6                          &kp AT          &kp UP_ARROW  &none       &none         &bt BT_SEL 1
  &to 5      &none      &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3                          &kp LEFT_ARROW  &kp DOWN      &kp RIGHT   &none         &bt BT_SEL 3
  &kp LSHFT  &to 0      &kp LALT      &kp LCMD      &kp SPACE     &kp BACKSPACE  &kp RET  &kp SPACE                                               &bt BT_CLR
            >;

            label = "489";
        };

        FCP_layer {
            bindings = <
  &kp LG(B)  &kp Q         &kp E         &none     &none                              &none      &none  &none  &none  &none
  &kp A      &kp NUMBER_1  &kp NUMBER_2  &none     &trans                             &none      &none  &none  &none  &none
  &trans     &kp X         &kp C         &kp V     &none                              &none      &none  &none  &none  &none
  &none      &to 0         &none         &kp LGUI  &kp SPACE  &kp BACKSPACE  &kp RET  &kp SPACE                       &none
            >;
        };

        function_layer {
            bindings = <
  &kp F1  &kp F2   &kp F3   &kp F4   &trans                  &trans  &trans  &trans  &trans  &trans
  &kp F5  &kp F6   &kp F7   &kp F8   &trans                  &trans  &trans  &trans  &trans  &trans
  &kp F9  &kp F10  &kp F11  &kp F12  &trans                  &trans  &trans  &trans  &trans  &trans
  &trans  &to 0    &trans   &trans   &trans  &trans  &trans  &trans                          &trans
            >;
        };

        mouse_layer {
            bindings = <
  &kp N1          &kp N2          &kp N3        &kp N4     &kp N5                  &kp N6         &kp N7     &kp N8  &kp N9     &kp N0
  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp UP_ARROW  &kp RIGHT  &trans                  &kp PAGE_UP    &mkp LCLK  &trans  &mkp RCLK  &mkp MCLK
  &trans          &trans          &trans        &trans     &trans                  &kp PAGE_DOWN  &trans     &trans  &trans     &trans
  &trans          &to 0           &trans        &trans     &trans  &trans  &trans  &trans                                       &trans
            >;
        };

        scroll_layer {
            bindings = <
  &msc MOVE_Y(0)  &none   &trans  &trans  &trans                  &trans  &trans  &trans  &trans  &trans
  &none           &trans  &trans  &trans  &trans                  &trans  &trans  &trans  &trans  &trans
  &trans          &trans  &trans  &trans  &trans                  &trans  &trans  &trans  &trans  &trans
  &trans          &to 0   &trans  &trans  &trans  &trans  &trans  &trans                          &trans
            >;
        };

        snipe_layer {
            bindings = <
  &trans  &trans  &trans  &trans  &bootloader                  &trans  &trans  &trans  &trans  &trans
  &trans  &trans  &trans  &trans  &trans                       &trans  &trans  &trans  &trans  &trans
  &trans  &trans  &trans  &trans  &trans                       &trans  &trans  &trans  &trans  &trans
  &trans  &trans  &trans  &trans  &trans       &trans  &trans  &trans                          &trans
            >;
        };

        customizable_layer {
            bindings = <
  &trans  &trans  &trans  &trans  &trans                  &trans  &trans  &trans  &trans  &trans
  &trans  &trans  &trans  &trans  &trans                  &trans  &trans  &trans  &trans  &trans
  &trans  &trans  &trans  &trans  &trans                  &trans  &trans  &trans  &trans  &trans
  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans                          &trans
            >;
        };
    };
};
